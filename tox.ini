[tox]
isolated_build = true
# Environments here are run in the order they appear.
# They can be individually run using "tox -e <env[,...]>".
envlist =
    mypy
    coverage_erase
    py{38, 39, 310, 311, 312}
    py{38, 311}-minimum_flask
    coverage_report
    docs
labels =
    update=update


[testenv:coverage_erase]
skip_install = true
deps = coverage[toml]
commands = coverage erase


[testenv]
package = wheel
wheel_build_env = build_wheel
depends =
    py{312, 311, 310, 39, 38}{-minimum_flask,}: coverage_erase
extras =
    testing
    !minimum_flask: flask
deps =
    minimum_flask: flask==2.3.0
commands = coverage run -m pytest


[testenv:coverage_report]
depends =
    py{312, 311, 310, 39, 38}{-minimum_flask,}
skip_install = true
deps = coverage[toml]
commands_pre =
    coverage combine
    coverage html --fail-under=0
commands = coverage report


[testenv:mypy]
skip_install = true
deps =
    mypy==1.5.1
    types-cachetools
    types-requests
    types-pyyaml

commands =
    mypy --ignore-missing-imports globus_action_provider_tools/ tests/


[testenv:docs]
# Use Python 3.12 to match the Read the Docs configuration.
base_python = py3.12
skip_install = true
deps =
    -r requirements/docs/requirements.txt
commands =
    sphinx-build -j auto -aqnEWb html --keep-going docs/source docs/html


[testenv:update]
base_python = py3.12
recreate = true
description = Update documentation, testing, and linting dependency versions
skip_install = true
deps =
    poetry
    poetry-plugin-export
    pre-commit
    upadup
commands =
    # Update test requirements
    poetry update --directory="requirements/docs" --lock
    poetry export --directory="requirements/docs" --output="requirements/docs/requirements.txt" --without-hashes

    # Update pre-commit hook versions
    pre-commit autoupdate
    upadup
